using System.Collections;
using System.Collections.Generic;
using GDTUtils.Extensions;
using Modules.ReferenceDb;
using Unity.VisualScripting;
using UnityCodeGen;
using UnityEditor;
using UnityEditor.VersionControl;
using UnityEngine;
using static Modules.ReferenceDb.DbEntries;

namespace Editor.CodeGen.ReferenceDb
{
    [Generator]
    public class AliasesConfigGenerator : ICodeGenerator
    {
        public static DbEntries        entriesPrefab = null;
        public static string           outputPath    = string.Empty;
        public static string           fileName      = string.Empty;

        private bool error = false;

        // *****************************
        // Execute 
        // *****************************
        public void Execute(GeneratorContext _context)
        {
            // check incoming data
            error = entriesPrefab == null || outputPath.NullOrEmpty() || fileName.NullOrEmpty();
            if (error)
            {
                Debug.LogWarning($"AliasesConfigGenerator: 'entriesPrefab' or 'outputPath' not specified!");
                Dispose();
                return;
            }

            // generate
            string code = GenerateConfig();

            if (error)
            {
                Debug.LogError($"AliasesConfigGenerator: Failed to generate file! Check entries config for errors!");
                Dispose();
                return;
            }
            
            _context.OverrideFolderPath(outputPath);
            _context.AddCode($"{fileName}.cs", code);
            Dispose();
        }

        void Dispose()
        {
            entriesPrefab = null;
            outputPath    = null;
            fileName      = null;
            error         = false;
        }
        
        // *****************************
        // GenerateConfig 
        // *****************************
        string GenerateConfig()
        {
            List<CategoryContainer> categories = new ();

            entriesPrefab.categories.ForEach(category =>
            {
                CategoryContainer categoryContainer = new();
                
                categoryContainer.name = category.categoryName;
                categories.Add(categoryContainer);
                
                category.entries.ForEach(entryConfig =>
                {
                    error = entryConfig.entry == null;
                    if (error)
                    {
                        return;
                    }
                    
                    AliasContainer aliasContainer = new();
                    aliasContainer.name  = entryConfig.entry.Alias;
                    aliasContainer.value = entryConfig.entry.Id;

                    error = aliasContainer.name.NullOrEmpty();
                    if (error)
                    {
                        return;
                    }
                    
                    categoryContainer.entries.Add(aliasContainer);
                });
            });

            if (error)
            {
                return default;
            }
            
            string dynamicContent = GenerateContent(categories, "\t\t");
            string dynamicEnums   = GenerateEnums(categories, "\t\t");
            string result         = 
@$"
// ******************************************************** //
// THIS CODE WAS AUTO GENERATED BY 'AliasesConfigGenerator' //
// ******************************************************** //

using System;
using System.Collections.Generic;
using UnityEngine;

namespace Modules.ReferenceDb_Public
{{
    //
    // All variables here are supposed to be used at runtime and are subject to change after refreshing ReferenceDB.
    // DO NOT serialize any field value directly. Use string aliases instead.
    //

    public class {fileName}
    {{   
    {dynamicContent}
    }}
    {dynamicEnums}
}}
";

            return result;
        }

        string GenerateContent(List<CategoryContainer> _categories, string _baseTabulation)
        {
            string result = "";

            _categories.ForEach(category =>
            {
                AddSpace();
                AddLine($"// {category.name} //");
                AddSpace();
                
                category.entries.ForEach(entry =>
                {
                    AddAlias(entry.name, entry.value);
                });
                result += "\n";
            });

            AddSpace();
            AddLine($"// Dictionaries //");
            AddSpace();

            AddGetMethod();
            AddAliasesDictionary();
            //AddIdToAliasesDictionary();

            return result;

            void AddLine(string _text)
            {
                result += 
@$"{_baseTabulation}{_text}";
            }

            void AddAlias(string _alias, int _value)
            {
                result += 
@$"
{_baseTabulation}public const int {_alias} = {_value};";
            }

            void AddGetMethod()
            {
                result += 
$@"
{_baseTabulation}// *****************************
{_baseTabulation}// GetId 
{_baseTabulation}// *****************************
{_baseTabulation}public int GetId(string _alias)
{_baseTabulation}{{
{_baseTabulation}   bool success = dictAliasToId.TryGetValue(_alias, out int result);
{_baseTabulation}   if(!success)
{_baseTabulation}   {{
{_baseTabulation}        Debug.Assert(false, $""Alias={{_alias}} was not found at ReferenceDb!"");
{_baseTabulation}   }} 
{_baseTabulation}   return result;
{_baseTabulation}}}
";
            }

            void AddAliasesDictionary()
            {
                string dictionaryContent = "\n";

                foreach (var category in _categories)
                {
                    category.entries.ForEach(entry =>
                    {
                        dictionaryContent += AddDictionaryLine(@$"""{entry.name}""", entry.value.ToString());
                    });
                }

                result +=
@$"
{_baseTabulation}private readonly Dictionary<string, int> dictAliasToId = new()
{_baseTabulation}{{{dictionaryContent}
{_baseTabulation}}};
";
            }
/*
            void AddIdToAliasesDictionary()
            {
                string dictionaryContent = "\n";

                foreach (var category in _categories)
                {
                    category.entries.ForEach(entry =>
                    {
                        dictionaryContent += AddDictionaryLine(entry.value.ToString(), @$"""{entry.name}""");
                    });
                }

                result +=
@$"
{_baseTabulation}private readonly Dictionary<int, string> dictIdToAlias = new()
{_baseTabulation}{{{dictionaryContent}
{_baseTabulation}}};
";
            }
*/

            string AddDictionaryLine(string _key, string _value)
            {
                string result =
@$"{_baseTabulation}    {{ {_key}, {_value} }},
";

                return result;
            }

            void AddSpace()
            {
                result += "\n";
            }
        }

        string GenerateEnums(List<CategoryContainer> _categories, string _baseTabulation)
        {
            string result = 
                @$"
    // CATEGORY ENUMS:";

            _categories.ForEach(c =>
            {
                string categoryName = c.name.ToUpper();
                string enumContent = "";
                int id = -1;
                
                c.entries.ForEach(e =>
                {
                    id++;
                    string comaSign = id <= c.entries.Count - 1 ? ",\n" : "";
                    enumContent += 
@$"{_baseTabulation}{e.name} = {e.value}{comaSign}";
                });

                result +=
@$"
    /// <summary>
    /// Elements of '{categoryName}' category.
    /// DO NOT serialize this enum.
    /// </summary>
    public enum CATEGORY_{categoryName}
    {{
{enumContent}
    }}";
            });
            
            
            
            return result;
        }
        
        class CategoryContainer
        {
            public string name;
            public List<AliasContainer> entries = new();
        }
        
        class AliasContainer
        {
            public string name;
            public int    value;
        }
    }
}