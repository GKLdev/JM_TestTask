using System.Collections;
using System.Collections.Generic;
using GDTUtils.Extensions;
using Editor.UIController;
using UnityCodeGen;
using UnityEngine;

namespace Editor.CodeGen.UIController
{
    [Generator]
    public class ScreensConfigGenerator : ICodeGenerator
    {
        public static Modules.UI.UIController.ConfigUIScreens config = null;
        
        public static string                outputPath    = string.Empty;
        public static string                fileName      = string.Empty;
        
        private bool error = false;
        
        // *****************************
        // Execute 
        // *****************************
        public void Execute(GeneratorContext _context)
        {
            // check incoming data
            error = config == null || outputPath.NullOrEmpty() || fileName.NullOrEmpty();
            if (error)
            {
                Debug.LogWarning($"ScreensConfigGenerator: 'config' or 'outputPath' not specified!");
                Dispose();
                return;
            }
            
            // generate
            string code = GenerateConfig();

            if (error)
            {
                Debug.LogError($"ScreensConfigGenerator: Failed to generate file! Check entries config for errors!");
                Dispose();
                return;
            }
            
            _context.OverrideFolderPath(outputPath);
            _context.AddCode($"{fileName}.cs", code);
            Dispose();
        }

        // *****************************
        // GenerateConfig 
        // *****************************
        string GenerateConfig()
        {
            List<string> content = new();
            config.screens.ForEach(x => content.Add(x.screenTypeName));

            error = content.Count == 0;
            if (error)
            {
                return default;
            }
            
            int    id          = -1;
            string enumContent = "";
            
            content.ForEach(x =>
            {
                id++;
                string comaSign = id <= content.Count - 1 ? ",\n" : "";
                enumContent += 
@$"{"\t"}{x} = {id}{comaSign}";
            });

            string result = @$"
// ******************************************************** //
// THIS CODE WAS AUTO GENERATED BY 'ScreensConfigGenerator' //
// ******************************************************** //

namespace Modules.UI.UIController_Public
{{
        public enum {fileName}
        {{
            UNDEFINED = -1,
        {enumContent}
        }}
}}
";
            return result;
        }
        
        // *****************************
        // Dispose 
        // *****************************
        void Dispose()
        {
            config = null;
            outputPath    = null;
            fileName      = null;
            error         = false;
        }
    }
}